var searchIndex = JSON.parse('{\
"egg":{"doc":"<code>egg</code> (<strong>e</strong>-<strong>g</strong>raphs <strong>g</strong>ood) is a e-graph library optimized for ‚Ä¶","i":[[0,"tutorials","egg","A Guide-level Explanation of <code>egg</code><code>egg</code> is a e-graph library ‚Ä¶",null,null],[0,"_01_background","egg::tutorials","Concepts: e-graphs and equality saturationAn <em>e-graph</em> is a ‚Ä¶",null,null],[0,"_02_getting_started","","My first <code>egg</code> üê£This tutorial is aimed at getting you up ‚Ä¶",null,null],[0,"_03_explanations","","ExplanationsIt\'s often useful to know exactly why two ‚Ä¶",null,null],[3,"Id","egg","A key to identify [<code>EClass</code>]es within an [<code>EGraph</code>].",null,null],[3,"Dot","","A wrapper for an [<code>EGraph</code>] that can output GraphViz for ‚Ä¶",null,null],[12,"config","","A list of strings to be output top part of the dot file.",0,null],[12,"use_anchors","","Whether or not to anchor the edges in the output. True by ‚Ä¶",0,null],[3,"EClass","","An equivalence class of enodes.",null,null],[12,"id","","This eclass\'s id.",1,null],[12,"nodes","","The equivalent enodes in this equivalence class.",1,null],[12,"data","","The analysis data associated with this eclass.",1,null],[3,"EGraph","","A data structure to keep track of equalities between ‚Ä¶",null,null],[12,"analysis","","The <code>Analysis</code> given when creating this <code>EGraph</code>.",2,null],[3,"Explanation","","A data structure representing an explanation that two ‚Ä¶",null,null],[12,"explanation_trees","","The tree representation of the explanation.",3,null],[6,"FlatExplanation","","FlatExplanation are the simpler, expanded representation ‚Ä¶",null,null],[3,"FlatTerm","","A single term in an flattened explanation. After the ‚Ä¶",null,null],[12,"node","","The node representing this FlatTerm\'s operator. The ‚Ä¶",4,null],[12,"backward_rule","","A rule rewriting this FlatTerm back to the last FlatTerm.",4,null],[12,"forward_rule","","A rule rewriting the last FlatTerm to this FlatTerm.",4,null],[12,"children","","The children of this FlatTerm.",4,null],[6,"TreeExplanation","","Explanation trees are the compact representation showing ‚Ä¶",null,null],[3,"TreeTerm","","An explanation for a term and its equivalent children. ‚Ä¶",null,null],[12,"node","","A node representing this TreeTerm\'s operator. The ‚Ä¶",5,null],[12,"backward_rule","","A rule rewritting this TreeTerm\'s initial term back to ‚Ä¶",5,null],[12,"forward_rule","","A rule rewriting the last TreeTerm\'s final term to this ‚Ä¶",5,null],[12,"child_proofs","","A list of child proofs, each transforming the initial ‚Ä¶",5,null],[3,"Extractor","","Extracting a single [<code>RecExpr</code>] from an [<code>EGraph</code>].",null,null],[8,"CostFunction","","A cost function that can be used by an [<code>Extractor</code>].",null,null],[16,"Cost","","The <code>Cost</code> type. It only requires <code>PartialOrd</code> so you can use ‚Ä¶",6,null],[10,"cost","","Calculates the cost of an enode whose children are <code>Cost</code>s.",6,[[]]],[11,"cost_rec","","Calculates the total cost of a [<code>RecExpr</code>].",6,[[["recexpr",3]]]],[3,"AstSize","","A simple [<code>CostFunction</code>] that counts total ast size.",null,null],[3,"AstDepth","","A simple [<code>CostFunction</code>] that counts maximum ast depth.",null,null],[8,"Language","","Trait that defines a Language whose terms will be in the [‚Ä¶",null,null],[10,"matches","","Returns true if this enode matches another enode. This ‚Ä¶",7,[[],["bool",15]]],[10,"children","","Returns the children of this e-node.",7,[[]]],[10,"children_mut","","Returns a mutable slice of the children of this e-node.",7,[[]]],[11,"for_each","","Runs a given function on each child <code>Id</code>.",7,[[["fnmut",8]]]],[11,"for_each_mut","","Runs a given function on each child <code>Id</code>, allowing mutation ‚Ä¶",7,[[["fnmut",8]]]],[11,"try_for_each","","Runs a falliable function on each child, stopping if the ‚Ä¶",7,[[],["result",4]]],[11,"len","","Returns the number of the children this enode has.",7,[[],["usize",15]]],[11,"is_leaf","","Returns true if this enode has no children.",7,[[],["bool",15]]],[11,"update_children","","Runs a given function to replace the children.",7,[[["fnmut",8]]]],[11,"map_children","","Creates a new enode with children determined by the given ‚Ä¶",7,[[["fnmut",8]]]],[11,"fold","","Folds over the children, given an initial accumulator.",7,[[]]],[11,"all","","Returns true if the predicate is true on all children. ‚Ä¶",7,[[["fnmut",8]],["bool",15]]],[11,"any","","Returns true if the predicate is true on any children. ‚Ä¶",7,[[["fnmut",8]],["bool",15]]],[11,"to_recexpr","","Make a <code>RecExpr</code> converting this enodes children to <code>RecExpr</code>s",7,[[],["recexpr",3]]],[8,"FromOp","","A trait for parsing e-nodes. This is implemented ‚Ä¶",null,null],[16,"Error","","The error type returned by <code>from_op</code> if its arguments do not‚Ä¶",8,null],[10,"from_op","","Parse an e-node with operator <code>op</code> and children <code>children</code>.",8,[[["id",3],["vec",3],["str",15]],["result",4]]],[3,"FromOpError","","A generic error for failing to parse an operator. This is ‚Ä¶",null,null],[8,"LanguageChildren","","A marker that defines acceptable children types for [‚Ä¶",null,null],[11,"is_empty","","Checks if there are no children.",9,[[],["bool",15]]],[10,"len","","Returns the number of children.",9,[[],["usize",15]]],[10,"can_be_length","","Checks if n is an acceptable number of children for this ‚Ä¶",9,[[["usize",15]],["bool",15]]],[10,"from_vec","","Create an instance of this type from a <code>Vec<Id></code>, with the ‚Ä¶",9,[[["vec",3],["id",3]]]],[10,"as_slice","","Returns a slice of the children <code>Id</code>s.",9,[[]]],[10,"as_mut_slice","","Returns a mutable slice of the children <code>Id</code>s.",9,[[]]],[3,"RecExpr","","A recursive expression from a user-defined [<code>Language</code>].",null,null],[4,"RecExprParseError","","An error type for failures when attempting to parse an ‚Ä¶",null,null],[13,"EmptySexp","","An empty s-expression was found. Usually this is caused ‚Ä¶",10,null],[13,"HeadList","","A list was found where an operator was expected. This is ‚Ä¶",10,null],[13,"BadOp","","Attempting to parse an operator into a value of type <code>L</code> ‚Ä¶",10,null],[13,"BadSexp","","An error occurred while parsing the s-expression itself, ‚Ä¶",10,null],[3,"DidMerge","","Result of [<code>Analysis::merge</code>] indicating which of the inputs‚Ä¶",null,null],[12,"0","","",11,null],[12,"1","","",11,null],[8,"Analysis","","Arbitrary data associated with an [<code>EClass</code>].",null,null],[16,"Data","","The per-[<code>EClass</code>] data for this analysis.",12,null],[10,"make","","Makes a new [<code>Analysis</code>] for a given enode [<code>Analysis</code>].",12,[[["egraph",3]]]],[11,"pre_union","","An optional hook that allows inspection before a <code>union</code> ‚Ä¶",12,[[["egraph",3],["id",3]]]],[10,"merge","","Defines how to merge two <code>Data</code>s when their containing [‚Ä¶",12,[[],["didmerge",3]]],[11,"modify","","A hook that allows the modification of the [<code>EGraph</code>]",12,[[["id",3],["egraph",3]]]],[5,"merge_max","","A utility for implementing [<code>Analysis::merge</code>] when the <code>Data</code>‚Ä¶",null,[[["ord",8]],["didmerge",3]]],[5,"merge_min","","A utility for implementing [<code>Analysis::merge</code>] when the <code>Data</code>‚Ä¶",null,[[["ord",8]],["didmerge",3]]],[3,"SymbolLang","","A simple language used for testing.",null,null],[12,"op","","The operator for an enode",13,null],[12,"children","","The enode\'s children <code>Id</code>s",13,null],[4,"ENodeOrVar","","The language of [<code>Pattern</code>]s.",null,null],[13,"ENode","","An enode from the underlying [<code>Language</code>]",14,null],[13,"Var","","A pattern variable",14,null],[3,"Pattern","","A pattern that can function as either a [<code>Searcher</code>] or [‚Ä¶",null,null],[12,"ast","","The actual pattern as a [<code>RecExpr</code>]",15,null],[6,"PatternAst","","A [<code>RecExpr</code>] that represents a [<code>Pattern</code>].",null,null],[3,"SearchMatches","","The result of searching a [<code>Searcher</code>] over one eclass.",null,null],[12,"eclass","","The eclass id that these matches were found in.",16,null],[12,"substs","","The substitutions for each match.",16,null],[12,"ast","","Optionally, an ast for the matches used in proof ‚Ä¶",16,null],[8,"Applier","","The righthand side of a [<code>Rewrite</code>].",null,null],[11,"apply_matches","","Apply many substititions.",17,[[["arc",3],["egraph",3],["str",15]],[["id",3],["vec",3]]]],[11,"get_pattern_ast","","For patterns, get the ast directly as a reference.",17,[[],[["option",4],["patternast",6]]]],[10,"apply_one","","Apply a single substitition.",17,[[["id",3],["str",15],["option",4],["patternast",6],["arc",3],["subst",3],["egraph",3]],[["id",3],["vec",3]]]],[11,"vars","","Returns a list of variables that this Applier assumes are ‚Ä¶",17,[[],[["vec",3],["var",3]]]],[8,"Condition","","A condition to check in a [<code>ConditionalApplier</code>].",null,null],[10,"check","","Check a condition.",18,[[["subst",3],["egraph",3],["id",3]],["bool",15]]],[11,"vars","","Returns a list of variables that this Condition assumes ‚Ä¶",18,[[],[["vec",3],["var",3]]]],[3,"ConditionEqual","","A [<code>Condition</code>] that checks if two terms are equivalent.",null,null],[3,"ConditionalApplier","","An [<code>Applier</code>] that checks a [<code>Condition</code>] before applying.",null,null],[12,"condition","","The [<code>Condition</code>] to <code>check</code> before calling <code>apply_one</code> on ‚Ä¶",19,null],[12,"applier","","The inner [<code>Applier</code>] to call once <code>condition</code> passes.",19,null],[3,"Rewrite","","A rewrite that searches for the lefthand side and applies ‚Ä¶",null,null],[12,"name","","The name of the rewrite.",20,null],[12,"searcher","","The searcher (left-hand side) of the rewrite.",20,null],[12,"applier","","The applier (right-hand side) of the rewrite.",20,null],[8,"Searcher","","The lefthand side of a [<code>Rewrite</code>].",null,null],[10,"search_eclass","","Search one eclass, returning None if no matches can be ‚Ä¶",21,[[["egraph",3],["id",3]],[["searchmatches",3],["option",4]]]],[11,"search","","Search the whole [<code>EGraph</code>], returning a list of all the [‚Ä¶",21,[[["egraph",3]],[["vec",3],["searchmatches",3]]]],[11,"get_pattern_ast","","For patterns, return the ast directly as a reference",21,[[],[["option",4],["patternast",6]]]],[10,"vars","","Returns a list of the variables bound by this Searcher",21,[[],[["vec",3],["var",3]]]],[3,"Runner","","Faciliates running rewrites over an [<code>EGraph</code>].",null,null],[12,"egraph","","The [<code>EGraph</code>] used.",22,null],[12,"iterations","","Data accumulated over each [<code>Iteration</code>].",22,null],[12,"roots","","The roots of expressions added by the <code>with_expr</code> method, ‚Ä¶",22,null],[12,"stop_reason","","Why the <code>Runner</code> stopped. This will be <code>None</code> if it hasn\'t ‚Ä¶",22,null],[12,"hooks","","The hooks added by the <code>with_hook</code> method, in insertion ‚Ä¶",22,null],[4,"StopReason","","Error returned by [<code>Runner</code>] when it stops.",null,null],[13,"Saturated","","The egraph saturated, i.e., there was an iteration where ‚Ä¶",23,null],[13,"IterationLimit","","The iteration limit was hit. The data is the iteration ‚Ä¶",23,null],[13,"NodeLimit","","The enode limit was hit. The data is the enode limit.",23,null],[13,"TimeLimit","","The time limit was hit. The data is the time limit in ‚Ä¶",23,null],[13,"Other","","Some other reason to stop.",23,null],[3,"Iteration","","Data generated by running a [<code>Runner</code>] one iteration.",null,null],[12,"egraph_nodes","","The number of enodes in the egraph at the start of this ‚Ä¶",24,null],[12,"egraph_classes","","The number of eclasses in the egraph at the start of this ‚Ä¶",24,null],[12,"applied","","A map from rule name to number of times it was <em>newly</em> ‚Ä¶",24,null],[12,"hook_time","","Seconds spent running hooks.",24,null],[12,"search_time","","Seconds spent searching in this iteration.",24,null],[12,"apply_time","","Seconds spent applying rules in this iteration.",24,null],[12,"rebuild_time","","Seconds spent <code>rebuild</code>ing the egraph in this iteration.",24,null],[12,"total_time","","Total time spent in this iteration, including data ‚Ä¶",24,null],[12,"data","","The user provided annotation for this iteration",24,null],[12,"n_rebuilds","","The number of rebuild iterations done after this ‚Ä¶",24,null],[12,"stop_reason","","If the runner stopped on this iterations, this is the ‚Ä¶",24,null],[8,"RewriteScheduler","","A way to customize how a [<code>Runner</code>] runs [<code>Rewrite</code>]s.",null,null],[11,"can_stop","","Whether or not the [<code>Runner</code>] is allowed to say it has ‚Ä¶",25,[[["usize",15]],["bool",15]]],[11,"search_rewrite","","A hook allowing you to customize rewrite searching ‚Ä¶",25,[[["usize",15],["egraph",3],["rewrite",3]],[["vec",3],["searchmatches",3]]]],[11,"apply_rewrite","","A hook allowing you to customize rewrite application ‚Ä¶",25,[[["usize",15],["vec",3],["searchmatches",3],["rewrite",3],["egraph",3]],["usize",15]]],[3,"SimpleScheduler","","A very simple [<code>RewriteScheduler</code>] that runs every rewrite ‚Ä¶",null,null],[3,"BackoffScheduler","","A [<code>RewriteScheduler</code>] that implements exponentional rule ‚Ä¶",null,null],[8,"IterationData","","Custom data to inject into the [<code>Iteration</code>]s recorded by a ‚Ä¶",null,null],[10,"make","","Given the current [<code>Runner</code>], make the data to be put in ‚Ä¶",26,[[["runner",3]]]],[3,"Subst","","A substitition mapping [<code>Var</code>]s to eclass [<code>Id</code>]s.",null,null],[3,"Var","","A variable for use in [<code>Pattern</code>]s or [<code>Subst</code>]s.",null,null],[3,"Symbol","","An interned string.",null,null],[14,"define_language","","A macro to easily create a [<code>Language</code>].",null,null],[14,"rewrite","","A macro to easily make [<code>Rewrite</code>]s.",null,null],[14,"test_fn","","Make a test function",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"equivalent","","",4,[[],["bool",15]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"equivalent","","",31,[[],["bool",15]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"equivalent","","",13,[[],["bool",15]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"equivalent","","",14,[[],["bool",15]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"equivalent","","",35,[[],["bool",15]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"equivalent","","",36,[[],["bool",15]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"equivalent","","",37,[[],["bool",15]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"equivalent","","",38,[[],["bool",15]]],[11,"cost","","",28,[[]]],[11,"cost","","",29,[[]]],[11,"matches","","",13,[[],["bool",15]]],[11,"children","","",13,[[]]],[11,"children_mut","","",13,[[]]],[11,"matches","","",14,[[],["bool",15]]],[11,"children","","",14,[[]]],[11,"children_mut","","",14,[[]]],[11,"from_op","","",13,[[["id",3],["vec",3],["str",15]],["result",4]]],[11,"from_op","","",14,[[["id",3],["vec",3],["str",15]],["result",4]]],[11,"len","","",38,[[],["usize",15]]],[11,"can_be_length","","",38,[[["usize",15]],["bool",15]]],[11,"from_vec","","",38,[[["vec",3],["id",3]]]],[11,"as_slice","","",38,[[]]],[11,"as_mut_slice","","",38,[[]]],[11,"get_pattern_ast","","",15,[[],[["option",4],["patternast",6]]]],[11,"search","","",15,[[["egraph",3]],[["vec",3],["searchmatches",3]]]],[11,"search_eclass","","",15,[[["id",3],["egraph",3]],[["searchmatches",3],["option",4]]]],[11,"vars","","",15,[[],[["vec",3],["var",3]]]],[11,"get_pattern_ast","","",15,[[],[["option",4],["patternast",6]]]],[11,"apply_matches","","",15,[[["egraph",3],["arc",3],["str",15]],[["id",3],["vec",3]]]],[11,"apply_one","","",15,[[["str",15],["option",4],["patternast",6],["egraph",3],["arc",3],["subst",3],["id",3]],[["id",3],["vec",3]]]],[11,"vars","","",15,[[],[["vec",3],["var",3]]]],[11,"apply_one","","",19,[[["id",3],["str",15],["option",4],["patternast",6],["arc",3],["subst",3],["egraph",3]],[["id",3],["vec",3]]]],[11,"vars","","",19,[[],[["vec",3],["var",3]]]],[11,"check","","",32,[[["subst",3],["egraph",3],["id",3]],["bool",15]]],[11,"vars","","",32,[[],[["vec",3],["var",3]]]],[11,"can_stop","","",34,[[["usize",15]],["bool",15]]],[11,"search_rewrite","","",34,[[["usize",15],["egraph",3],["rewrite",3]],[["vec",3],["searchmatches",3]]]],[11,"as_ref","","",31,[[]]],[11,"from","","",31,[[["vec",3]]]],[11,"from","","",15,[[]]],[11,"from","","",15,[[["patternast",6]]]],[11,"from","","",37,[[]]],[11,"from","","",38,[[["usize",15]],["id",3]]],[11,"clone","","",1,[[],["eclass",3]]],[11,"clone","","",2,[[],["egraph",3]]],[11,"clone","","",5,[[],["treeterm",3]]],[11,"clone","","",4,[[],["flatterm",3]]],[11,"clone","","",31,[[],["recexpr",3]]],[11,"clone","","",13,[[],["symbollang",3]]],[11,"clone","","",15,[[],["pattern",3]]],[11,"clone","","",14,[[],["enodeorvar",4]]],[11,"clone","","",20,[[],["rewrite",3]]],[11,"clone","","",19,[[],["conditionalapplier",3]]],[11,"clone","","",23,[[],["stopreason",4]]],[11,"clone","","",24,[[],["iteration",3]]],[11,"clone","","",35,[[],["var",3]]],[11,"clone","","",36,[[],["subst",3]]],[11,"clone","","",37,[[],["symbol",3]]],[11,"clone","","",38,[[],["id",3]]],[11,"default","","",2,[[]]],[11,"default","","",31,[[]]],[11,"default","","",22,[[]]],[11,"default","","",34,[[]]],[11,"default","","",36,[[],["subst",3]]],[11,"default","","",38,[[],["id",3]]],[11,"cmp","","",31,[[["recexpr",3]],["ordering",4]]],[11,"cmp","","",13,[[["symbollang",3]],["ordering",4]]],[11,"cmp","","",14,[[["enodeorvar",4]],["ordering",4]]],[11,"cmp","","",35,[[["var",3]],["ordering",4]]],[11,"cmp","","",36,[[["subst",3]],["ordering",4]]],[11,"cmp","","",37,[[["symbol",3]],["ordering",4]]],[11,"cmp","","",38,[[["id",3]],["ordering",4]]],[11,"eq","","",4,[[["flatterm",3]],["bool",15]]],[11,"eq","","",31,[[["recexpr",3]],["bool",15]]],[11,"ne","","",31,[[["recexpr",3]],["bool",15]]],[11,"eq","","",13,[[["symbollang",3]],["bool",15]]],[11,"ne","","",13,[[["symbollang",3]],["bool",15]]],[11,"eq","","",15,[[["pattern",3]],["bool",15]]],[11,"ne","","",15,[[["pattern",3]],["bool",15]]],[11,"eq","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"ne","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"eq","","",35,[[["var",3]],["bool",15]]],[11,"ne","","",35,[[["var",3]],["bool",15]]],[11,"eq","","",36,[[["subst",3]],["bool",15]]],[11,"ne","","",36,[[["subst",3]],["bool",15]]],[11,"eq","","",37,[[["symbol",3]],["bool",15]]],[11,"ne","","",37,[[["symbol",3]],["bool",15]]],[11,"eq","","",38,[[["id",3]],["bool",15]]],[11,"ne","","",38,[[["id",3]],["bool",15]]],[11,"partial_cmp","","",31,[[["recexpr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",31,[[["recexpr",3]],["bool",15]]],[11,"le","","",31,[[["recexpr",3]],["bool",15]]],[11,"gt","","",31,[[["recexpr",3]],["bool",15]]],[11,"ge","","",31,[[["recexpr",3]],["bool",15]]],[11,"partial_cmp","","",13,[[["symbollang",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["symbollang",3]],["bool",15]]],[11,"le","","",13,[[["symbollang",3]],["bool",15]]],[11,"gt","","",13,[[["symbollang",3]],["bool",15]]],[11,"ge","","",13,[[["symbollang",3]],["bool",15]]],[11,"partial_cmp","","",14,[[["enodeorvar",4]],[["option",4],["ordering",4]]]],[11,"lt","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"le","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"gt","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"ge","","",14,[[["enodeorvar",4]],["bool",15]]],[11,"partial_cmp","","",35,[[["var",3]],[["option",4],["ordering",4]]]],[11,"lt","","",35,[[["var",3]],["bool",15]]],[11,"le","","",35,[[["var",3]],["bool",15]]],[11,"gt","","",35,[[["var",3]],["bool",15]]],[11,"ge","","",35,[[["var",3]],["bool",15]]],[11,"partial_cmp","","",36,[[["subst",3]],[["option",4],["ordering",4]]]],[11,"lt","","",36,[[["subst",3]],["bool",15]]],[11,"le","","",36,[[["subst",3]],["bool",15]]],[11,"gt","","",36,[[["subst",3]],["bool",15]]],[11,"ge","","",36,[[["subst",3]],["bool",15]]],[11,"partial_cmp","","",37,[[["symbol",3]],[["option",4],["ordering",4]]]],[11,"lt","","",37,[[["symbol",3]],["bool",15]]],[11,"le","","",37,[[["symbol",3]],["bool",15]]],[11,"gt","","",37,[[["symbol",3]],["bool",15]]],[11,"ge","","",37,[[["symbol",3]],["bool",15]]],[11,"partial_cmp","","",38,[[["id",3]],[["option",4],["ordering",4]]]],[11,"lt","","",38,[[["id",3]],["bool",15]]],[11,"le","","",38,[[["id",3]],["bool",15]]],[11,"gt","","",38,[[["id",3]],["bool",15]]],[11,"ge","","",38,[[["id",3]],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"bitor","","",11,[[]]],[11,"index","","",2,[[["id",3]]]],[11,"index","","",31,[[["id",3]]]],[11,"index","","",36,[[["var",3]]]],[11,"index_mut","","",2,[[["id",3]]]],[11,"index_mut","","",31,[[["id",3]]]],[11,"hash","","",31,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"try_from","","",31,[[["pattern",3]],["result",4]]],[11,"from_str","","",31,[[["str",15]],["result",4]]],[11,"from_str","","",15,[[["str",15]],["result",4]]],[11,"from_str","","",35,[[["str",15]],["result",4]]],[11,"from_str","","",37,[[["str",15]],["result",4]]],[11,"source","","",10,[[],[["error",8],["option",4]]]],[11,"to_dot","","Writes the <code>Dot</code> to a .dot file with the given filename. ‚Ä¶",0,[[],["result",6]]],[11,"with_config_line","","Adds a line to the dot output. Indentation and a newline ‚Ä¶",0,[[]]],[11,"with_anchors","","Set whether or not to anchor the edges in the output.",0,[[["bool",15]]]],[11,"to_png","","Renders the <code>Dot</code> to a .png file with the given filename. ‚Ä¶",0,[[],["result",6]]],[11,"to_svg","","Renders the <code>Dot</code> to a .svg file with the given filename. ‚Ä¶",0,[[],["result",6]]],[11,"to_pdf","","Renders the <code>Dot</code> to a .pdf file with the given filename. ‚Ä¶",0,[[],["result",6]]],[11,"run_dot","","Invokes <code>dot</code> with the given arguments, piping this ‚Ä¶",0,[[],["result",6]]],[11,"run","","Invokes some program with the given arguments, piping this‚Ä¶",0,[[],["result",6]]],[11,"is_empty","","Returns <code>true</code> if the <code>eclass</code> is empty.",1,[[],["bool",15]]],[11,"len","","Returns the number of enodes in this eclass.",1,[[],["usize",15]]],[11,"iter","","Iterates over the enodes in this eclass.",1,[[]]],[11,"leaves","","Iterates over the childless enodes in this eclass.",1,[[]]],[11,"assert_unique_leaves","","Asserts that the childless enodes in this eclass are ‚Ä¶",1,[[]]],[11,"new","","Creates a new, empty <code>EGraph</code> with the given <code>Analysis</code>",2,[[]]],[11,"classes","","Returns an iterator over the eclasses in the egraph.",2,[[]]],[11,"classes_mut","","Returns an mutating iterator over the eclasses in the ‚Ä¶",2,[[]]],[11,"is_empty","","Returns <code>true</code> if the egraph is empty",2,[[],["bool",15]]],[11,"total_size","","Returns the number of enodes in the <code>EGraph</code>.",2,[[],["usize",15]]],[11,"total_number_of_nodes","","Iterates over the classes, returning the total number of ‚Ä¶",2,[[],["usize",15]]],[11,"number_of_classes","","Returns the number of eclasses in the egraph.",2,[[],["usize",15]]],[11,"with_explanations_enabled","","Enable explanations for this <code>EGraph</code>. This allows the ‚Ä¶",2,[[]]],[11,"with_explanations_disabled","","Disable explanations for this <code>EGraph</code>.",2,[[]]],[11,"are_explanations_enabled","","Check if explanations are enabled.",2,[[],["bool",15]]],[11,"explain_equivalence","","When explanations are enabled, this function produces an [‚Ä¶",2,[[["recexpr",3]],["explanation",3]]],[11,"explain_matches","","Get an explanation for why an expression matches a ‚Ä¶",2,[[["recexpr",3],["patternast",6],["subst",3]],["explanation",3]]],[11,"find","","Canonicalizes an eclass id.",2,[[["id",3]],["id",3]]],[11,"dot","","Creates a [<code>Dot</code>] to visualize this egraph. See [<code>Dot</code>].",2,[[],["dot",3]]],[11,"add_expr","","Adds a [<code>RecExpr</code>] to the [<code>EGraph</code>].",2,[[["recexpr",3]],["id",3]]],[11,"add_instantiation","","Adds a [<code>Pattern</code>] and a substitution to the [<code>EGraph</code>].",2,[[["patternast",6],["subst",3]],["id",3]]],[11,"lookup","","Lookup the eclass of the given enode.",2,[[],[["option",4],["id",3]]]],[11,"lookup_expr","","Lookup the eclass of the given [<code>RecExpr</code>].",2,[[["recexpr",3]],[["option",4],["id",3]]]],[11,"add","","Adds an enode to the [<code>EGraph</code>].",2,[[],["id",3]]],[11,"equivs","","Checks whether two [<code>RecExpr</code>]s are equivalent. Returns a ‚Ä¶",2,[[["recexpr",3]],[["id",3],["vec",3]]]],[11,"union_instantiations","","Given two patterns and a substitution, add the patterns ‚Ä¶",2,[[["patternast",6],["subst",3]]]],[11,"union","","Marks two eclasses to be unioned given their ids.",2,[[["id",3]],["bool",15]]],[11,"dump","","Returns a more debug-able representation of the egraph.",2,[[]]],[11,"check_goals","","Panic if the given eclass doesn\'t contain the given ‚Ä¶",2,[[["id",3]]]],[11,"rebuild","","Restores the egraph invariants of congruence and enode ‚Ä¶",2,[[],["usize",15]]],[11,"get_flat_string","","Get the flattened explanation as a string.",3,[[],["string",3]]],[11,"get_string","","Get the tree-style explanation as a string.",3,[[],["string",3]]],[11,"get_string_with_let","","Get the tree-style explanation with let binding as a ‚Ä¶",3,[[],["string",3]]],[11,"get_flat_strings","","Get each term in the explanation as a string.",3,[[],[["vec",3],["string",3]]]],[11,"get_sexp","","Get each the tree-style explanation as an s-expression.",3,[[],["sexp",4]]],[11,"get_sexp_with_let","","Get the tree-style explanation as an s-expression with ‚Ä¶",3,[[],["sexp",4]]],[11,"get_flat_sexps","","Get each flattened term in the explanation as an ‚Ä¶",3,[[],[["vec",3],["sexp",4]]]],[11,"new","","Construct a new explanation given its tree representation.",3,[[["treeexplanation",6]],["explanation",3]]],[11,"make_flat_explanation","","Construct the flat representation of the explanation and ‚Ä¶",3,[[],["flatexplanation",6]]],[11,"check_proof","","Check the validity of the explanation with respect to the ‚Ä¶",3,[[]]],[11,"new","","Construct a new TreeTerm given its node and child_proofs.",5,[[["treeexplanation",6],["vec",3]],["treeterm",3]]],[11,"flatten_explanation","","Construct the [<code>FlatExplanation</code>] for this TreeTerm.",5,[[],["flatexplanation",6]]],[11,"get_sexp","","Convert this FlatTerm to an S-expression. See ‚Ä¶",4,[[],["sexp",4]]],[11,"get_sexp","","Convert this TreeTerm to an S-expression. See <code>get_sexp</code> ‚Ä¶",5,[[],["sexp",4]]],[11,"new","","Construct a new FlatTerm given a node and its children.",4,[[["flatexplanation",6]],["flatterm",3]]],[11,"rewrite","","Rewrite the FlatTerm by matching the lhs and substituting ‚Ä¶",4,[[["patternast",6]],["flatterm",3]]],[11,"has_rewrite_forward","","Checks if this term or any child has a <code>forward_rule</code>.",4,[[],["bool",15]]],[11,"has_rewrite_backward","","Checks if this term or any child has a <code>backward_rule</code>.",4,[[],["bool",15]]],[11,"cost_rec","","Calculates the total cost of a [<code>RecExpr</code>].",6,[[["recexpr",3]]]],[11,"new","","Create a new <code>Extractor</code> given an <code>EGraph</code> and a <code>CostFunction</code>.",27,[[["egraph",3]]]],[11,"find_best","","Find the cheapest (lowest cost) represented <code>RecExpr</code> in the‚Ä¶",27,[[["id",3]]]],[11,"find_best_with_ids","","Find the cheapest (lowest cost) represented <code>RecExpr</code> in the‚Ä¶",27,[[["id",3]]]],[11,"find_best_node","","Find the cheapest e-node in the given e-class.",27,[[["id",3]]]],[11,"find_best_cost","","Find the cost of the term that would be extracted from ‚Ä¶",27,[[["id",3]]]],[11,"for_each","","Runs a given function on each child <code>Id</code>.",7,[[["fnmut",8]]]],[11,"for_each_mut","","Runs a given function on each child <code>Id</code>, allowing mutation ‚Ä¶",7,[[["fnmut",8]]]],[11,"try_for_each","","Runs a falliable function on each child, stopping if the ‚Ä¶",7,[[],["result",4]]],[11,"len","","Returns the number of the children this enode has.",7,[[],["usize",15]]],[11,"is_leaf","","Returns true if this enode has no children.",7,[[],["bool",15]]],[11,"update_children","","Runs a given function to replace the children.",7,[[["fnmut",8]]]],[11,"map_children","","Creates a new enode with children determined by the given ‚Ä¶",7,[[["fnmut",8]]]],[11,"fold","","Folds over the children, given an initial accumulator.",7,[[]]],[11,"all","","Returns true if the predicate is true on all children. ‚Ä¶",7,[[["fnmut",8]],["bool",15]]],[11,"any","","Returns true if the predicate is true on any children. ‚Ä¶",7,[[["fnmut",8]],["bool",15]]],[11,"to_recexpr","","Make a <code>RecExpr</code> converting this enodes children to <code>RecExpr</code>s",7,[[],["recexpr",3]]],[11,"new","","Create a new <code>FromOpError</code> representing a failed call ‚Ä¶",30,[[["id",3],["vec",3],["str",15]]]],[11,"is_empty","","Checks if there are no children.",9,[[],["bool",15]]],[11,"add","","Adds a given enode to this <code>RecExpr</code>. The enode\'s children ‚Ä¶",31,[[],["id",3]]],[11,"pretty","","Pretty print with a maximum line length.",31,[[["usize",15]],["string",3]]],[11,"pre_union","","An optional hook that allows inspection before a <code>union</code> ‚Ä¶",12,[[["egraph",3],["id",3]]]],[11,"modify","","A hook that allows the modification of the [<code>EGraph</code>]",12,[[["id",3],["egraph",3]]]],[11,"new","","Create an enode with the given string and children",13,[[["vec",3],["id",3]]]],[11,"leaf","","Create childless enode with the given string",13,[[]]],[11,"vars","","Returns a list of the [<code>Var</code>]s in this pattern.",15,[[],[["vec",3],["var",3]]]],[11,"pretty","","Pretty print this pattern as a sexp with the given width",15,[[["usize",15]],["string",3]]],[11,"name","","Returns the name of the rewrite.",20,[[],["str",15]]],[11,"new","","Create a new [<code>Rewrite</code>]. You typically want to use the [‚Ä¶",20,[[],[["result",4],["string",3]]]],[11,"search","","Call <code>search</code> on the [<code>Searcher</code>].",20,[[["egraph",3]],[["vec",3],["searchmatches",3]]]],[11,"apply","","Call <code>apply_matches</code> on the [<code>Applier</code>].",20,[[["egraph",3]],[["id",3],["vec",3]]]],[11,"search","","Search the whole [<code>EGraph</code>], returning a list of all the [‚Ä¶",21,[[["egraph",3]],[["vec",3],["searchmatches",3]]]],[11,"get_pattern_ast","","For patterns, return the ast directly as a reference",21,[[],[["option",4],["patternast",6]]]],[11,"apply_matches","","Apply many substititions.",17,[[["arc",3],["egraph",3],["str",15]],[["id",3],["vec",3]]]],[11,"get_pattern_ast","","For patterns, get the ast directly as a reference.",17,[[],[["option",4],["patternast",6]]]],[11,"vars","","Returns a list of variables that this Applier assumes are ‚Ä¶",17,[[],[["vec",3],["var",3]]]],[11,"vars","","Returns a list of variables that this Condition assumes ‚Ä¶",18,[[],[["vec",3],["var",3]]]],[11,"new","","Create a new [<code>ConditionEqual</code>] condition given two ‚Ä¶",32,[[["pattern",3]]]],[11,"parse","","Create a ConditionEqual by parsing two pattern strings.",32,[[["str",15]]]],[11,"new","","Create a new <code>Runner</code> with the given analysis and default ‚Ä¶",22,[[]]],[11,"with_iter_limit","","Sets the iteration limit. Default: 30",22,[[["usize",15]]]],[11,"with_node_limit","","Sets the egraph size limit (in enodes). Default: 10,000",22,[[["usize",15]]]],[11,"with_time_limit","","Sets the runner time limit. Default: 5 seconds",22,[[["duration",3]]]],[11,"with_hook","","Add a hook to instrument or modify the behavior of a [‚Ä¶",22,[[]]],[11,"with_scheduler","","Change out the [<code>RewriteScheduler</code>] used by this [<code>Runner</code>]. ‚Ä¶",22,[[]]],[11,"with_expr","","Add an expression to the egraph to be run.",22,[[["recexpr",3]]]],[11,"with_egraph","","Replace the [<code>EGraph</code>] of this <code>Runner</code>.",22,[[["egraph",3]]]],[11,"run","","Run this <code>Runner</code> until it stops. After this, the field ‚Ä¶",22,[[]]],[11,"with_explanations_enabled","","Enable explanations for this runner\'s egraph. This allows ‚Ä¶",22,[[]]],[11,"with_explanations_disabled","","Disable explanations for this runner\'s egraph.",22,[[]]],[11,"explain_equivalence","","Calls <code>EGraph::explain_equivalence</code>.",22,[[["recexpr",3]],["explanation",3]]],[11,"explain_matches","","Get an explanation for why an expression matches a ‚Ä¶",22,[[["recexpr",3],["patternast",6],["subst",3]],["explanation",3]]],[11,"print_report","","Prints some information about a runners run.",22,[[]]],[11,"can_stop","","Whether or not the [<code>Runner</code>] is allowed to say it has ‚Ä¶",25,[[["usize",15]],["bool",15]]],[11,"search_rewrite","","A hook allowing you to customize rewrite searching ‚Ä¶",25,[[["usize",15],["egraph",3],["rewrite",3]],[["vec",3],["searchmatches",3]]]],[11,"apply_rewrite","","A hook allowing you to customize rewrite application ‚Ä¶",25,[[["usize",15],["vec",3],["searchmatches",3],["rewrite",3],["egraph",3]],["usize",15]]],[11,"with_initial_match_limit","","Set the initial match limit after which a rule will be ‚Ä¶",34,[[["usize",15]]]],[11,"with_ban_length","","Set the initial ban length. Default: 5 iterations",34,[[["usize",15]]]],[11,"do_not_ban","","Never ban a particular rule.",34,[[["str",15]]]],[11,"rule_match_limit","","Set the initial match limit for a rule.",34,[[["usize",15],["str",15]]]],[11,"rule_ban_length","","Set the initial ban length for a rule.",34,[[["usize",15],["str",15]]]],[11,"with_capacity","","Create a <code>Subst</code> with the given initial capacity",36,[[["usize",15]]]],[11,"insert","","Insert something, returning the old <code>Id</code> if present.",36,[[["var",3],["id",3]],[["option",4],["id",3]]]],[11,"get","","Retrieve a <code>Var</code>, returning <code>None</code> if not present.",36,[[["var",3]],[["option",4],["id",3]]]],[11,"as_str","","Get the string that this symbol represents",37,[[],["str",15]]]],"p":[[3,"Dot"],[3,"EClass"],[3,"EGraph"],[3,"Explanation"],[3,"FlatTerm"],[3,"TreeTerm"],[8,"CostFunction"],[8,"Language"],[8,"FromOp"],[8,"LanguageChildren"],[4,"RecExprParseError"],[3,"DidMerge"],[8,"Analysis"],[3,"SymbolLang"],[4,"ENodeOrVar"],[3,"Pattern"],[3,"SearchMatches"],[8,"Applier"],[8,"Condition"],[3,"ConditionalApplier"],[3,"Rewrite"],[8,"Searcher"],[3,"Runner"],[4,"StopReason"],[3,"Iteration"],[8,"RewriteScheduler"],[8,"IterationData"],[3,"Extractor"],[3,"AstSize"],[3,"AstDepth"],[3,"FromOpError"],[3,"RecExpr"],[3,"ConditionEqual"],[3,"SimpleScheduler"],[3,"BackoffScheduler"],[3,"Var"],[3,"Subst"],[3,"Symbol"],[3,"Id"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);